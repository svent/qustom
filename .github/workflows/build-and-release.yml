name: Build and Release

on:
  push:
    branches: [ main ]
    tags: v*
    paths-ignore:
      - '**/*.md'
  pull_request:
    branches: [ main ]
    paths-ignore:
      - '**/*.md'

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
    - name: Set up Go 1.x
      uses: actions/setup-go@v2
      with:
        go-version: ^1.14

    - name: Check out code
      uses: actions/checkout@v2

    - name: Get dependencies
      run: go get -v -d ./...

    - name: Build Go
      run: go build -o ${{ github.event.repository.name }} -v .

    - name: Upload binary
      uses: actions/upload-artifact@v2
      with:
        name: binary
        if-no-files-found: error
        path: ${{ github.event.repository.name }}

    - name: Create XML Bundle
      run: ./${{ github.event.repository.name }} generate -bundle bundle.xml functions

    - name: Upload bundle
      uses: actions/upload-artifact@v2
      with:
        name: bundle
        if-no-files-found: error
        path: bundle.xml

  release:
    name: Release
    if: startsWith(github.ref, 'refs/tags/v')    
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Set variable
      id: vars
      run: echo ::set-output name=tag::${GITHUB_REF#refs/*/}

    - name: Check out static assets
      uses: actions/checkout@v2

    - name: Download binary
      uses: actions/download-artifact@v2
      with:
        name: binary

    - name: Download bundle
      uses: actions/download-artifact@v2
      with:
        name: bundle

    - name: Create tool tgz
      run: tar czf ${{ github.event.repository.name }}-tool-${{ steps.vars.outputs.tag }}.tar.gz ${{ github.event.repository.name }} LICENSE

    - name: Create bundle zip
      run: zip --junk-paths ${{ github.event.repository.name }}-bundle-${{ steps.vars.outputs.tag }}.zip bundle.xml

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

    - name: Upload Tool Release Asset
      id: upload-tool-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./${{ github.event.repository.name }}-tool-${{ steps.vars.outputs.tag }}.tar.gz
        asset_name: ${{ github.event.repository.name }}-tool-${{ steps.vars.outputs.tag }}.tar.gz
        asset_content_type: application/gzip

    - name: Upload Bundle Release Asset
      id: upload-bundle-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./${{ github.event.repository.name }}-bundle-${{ steps.vars.outputs.tag }}.zip
        asset_name: ${{ github.event.repository.name }}-bundle-${{ steps.vars.outputs.tag }}.zip
        asset_content_type: application/gzip

